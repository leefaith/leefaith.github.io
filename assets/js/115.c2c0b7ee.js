(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{896:function(v,_,e){"use strict";e.r(_);var t=e(36),p=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"nodejs的事件轮询机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nodejs的事件轮询机制"}},[v._v("#")]),v._v(" nodejs的事件轮询机制")]),v._v(" "),e("p",[e("strong",[v._v("nodejs的事件轮询机制： 借助libuv库来实现的")]),v._v("(可去github找)（c语言写的）")]),v._v(" "),e("p",[v._v("事件轮询机制主要分为"),e("strong",[v._v("六个阶段")]),v._v("：")]),v._v(" "),e("p",[v._v("1.timers 计时器阶段")]),v._v(" "),e("p",[v._v("计时和执行到点的定时器回调函数")]),v._v(" "),e("p",[v._v("2.pending callbacks")]),v._v(" "),e("p",[v._v("某些系统操作（如tcp错误类型）的回调函数")]),v._v(" "),e("p",[v._v("3.idle ，prepare")]),v._v(" "),e("p",[v._v("准备工作")]),v._v(" "),e("p",[v._v("4.poll 轮询阶段（轮询队列）")]),v._v(" "),e("p",[v._v("如果轮询队列不为空，依次同步取出轮询队列中第一个回调执行，知道轮询队列为空或者达到系统最大的限制")]),v._v(" "),e("p",[v._v("如果轮询队列为空")]),v._v(" "),e("p",[v._v("如果之前设置过setImmediate函数")]),v._v(" "),e("p",[v._v("直接进入下一个check阶段")]),v._v(" "),e("p",[v._v("如果之前没有设置过setImmediate函数")]),v._v(" "),e("p",[v._v("在当前poll阶段等待")]),v._v(" "),e("p",[v._v("直到轮询队列添加回调函数，就去第一个情况执行")]),v._v(" "),e("p",[v._v("如果定时器到点了，也会去下一个阶段")]),v._v(" "),e("p",[v._v("5.check 查阶段")]),v._v(" "),e("p",[v._v("执行setImmediate设置的回调函数")]),v._v(" "),e("p",[v._v("6.close callbacks 关闭阶段")]),v._v(" "),e("p",[v._v("执行close时间回调函数")])])}),[],!1,null,null,null);_.default=p.exports}}]);