(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{553:function(s,t,a){s.exports=a.p+"assets/img/j9.7e618928.png"},554:function(s,t,a){s.exports=a.p+"assets/img/j10.ff06481d.png"},555:function(s,t,a){s.exports=a.p+"assets/img/j11.f9ef584b.png"},556:function(s,t,a){s.exports=a.p+"assets/img/j12.ccbbb015.png"},557:function(s,t,a){s.exports=a.p+"assets/img/j13.82b36791.png"},558:function(s,t,a){s.exports=a.p+"assets/img/j14.1f7fb6dc.png"},841:function(s,t,a){"use strict";a.r(t);var n=a(36),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_4-运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-运算符"}},[s._v("#")]),s._v(" 4. 运算符")]),s._v(" "),n("p",[s._v("是用于实现赋值、比较和执行算数运算等功能的符号。")]),s._v(" "),n("h2",{attrs:{id:"_2-算数运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-算数运算符"}},[s._v("#")]),s._v(" 2. 算数运算符")]),s._v(" "),n("p",[s._v("算术运算使用的符号，用于执行两个变量或值的算术运算")]),s._v(" "),n("p",[n("img",{attrs:{src:a(553),alt:"j9"}})]),s._v(" "),n("h2",{attrs:{id:"_3-递增和递减运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-递增和递减运算符"}},[s._v("#")]),s._v(" 3. 递增和递减运算符")]),s._v(" "),n("p",[s._v("放在变量前面时，我们可以称为前置递增（递减）运算符，放在变量后面时，我们可以称为后置递增（递减）运算符。")]),s._v(" "),n("h4",{attrs:{id:"_1-前置递增运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-前置递增运算符"}},[s._v("#")]),s._v(" 1. 前置递增运算符")]),s._v(" "),n("p",[s._v("++num 前置递增，就是自加1，类似于 num = num + 1，但是 ++num 写起来更简单。\n使用口诀：先自加，后返回值")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("num "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 21")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h4",{attrs:{id:"_2-后置递增运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-后置递增运算符"}},[s._v("#")]),s._v(" 2. 后置递增运算符")]),s._v(" "),n("p",[s._v("num++ 后置递增，就是自加1，类似于 num = num + 1 ，但是 num++ 写起来更简单。\n使用口诀：先返回原值，后自加")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("alert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" num"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 20")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"_4-比较运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-比较运算符"}},[s._v("#")]),s._v(" 4. 比较运算符")]),s._v(" "),n("p",[s._v("比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值\n（true / false）作为比较运算的结果")]),s._v(" "),n("p",[n("img",{attrs:{src:a(554),alt:"j10"}})]),s._v(" "),n("p",[n("strong",[s._v("小结")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(555),alt:"j11"}})]),s._v(" "),n("h2",{attrs:{id:"_5-逻辑运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-逻辑运算符"}},[s._v("#")]),s._v(" 5. 逻辑运算符")]),s._v(" "),n("p",[s._v("逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。")]),s._v(" "),n("p",[n("img",{attrs:{src:a(556),alt:"j12"}})]),s._v(" "),n("ul",[n("li",[n("p",[s._v("逻辑与&&")]),s._v(" "),n("p",[s._v("两边都是 true才返回 true，否则返回 false")])]),s._v(" "),n("li",[n("p",[s._v("逻辑或 ||")]),s._v(" "),n("p",[s._v("两边都是 true才返回 true，否则返回 false")])]),s._v(" "),n("li",[n("p",[s._v("逻辑非 ！")]),s._v(" "),n("p",[s._v("逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false")]),s._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" isOk "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),n("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("isOk"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("短路运算（逻辑中断）")]),s._v(" "),n("p",[s._v("短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("逻辑与")]),s._v(" "),n("p",[s._v("语法： 表达式1 && 表达式2")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v("  - 如果第一个表达式的值为真，则返回表达式2\n  \n  - 如果第一个表达式的值为假，则返回表达式1\n")])])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 456")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("789")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 789")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("逻辑或")]),s._v(" "),n("p",[s._v("语法： 表达式1 || 表达式2")]),s._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[s._v(" - 如果第一个表达式的值为真，则返回表达式1\n \n - 如果第一个表达式的值为假，则返回表达式2\n")])])]),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[s._v("console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  123")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("          "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  456")]),s._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("456")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("789")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  123")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])])])])]),s._v(" "),n("h2",{attrs:{id:"_6-赋值运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-赋值运算符"}},[s._v("#")]),s._v(" 6. 赋值运算符")]),s._v(" "),n("p",[n("img",{attrs:{src:a(557),alt:"j13"}})]),s._v(" "),n("h2",{attrs:{id:"_7-运算符优先级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-运算符优先级"}},[s._v("#")]),s._v(" 7. 运算符优先级")]),s._v(" "),n("p",[n("img",{attrs:{src:a(558),alt:"j14"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);