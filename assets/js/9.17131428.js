(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{737:function(t,a,s){t.exports=s.p+"assets/img/h5.f612e47a.png"},738:function(t,a,s){t.exports=s.p+"assets/img/h6.dc2281e7.png"},739:function(t,a,s){t.exports=s.p+"assets/img/h7.e0a8868b.png"},740:function(t,a,s){t.exports=s.p+"assets/img/h9.714d87c7.png"},741:function(t,a,s){t.exports=s.p+"assets/img/h10.1876b572.png"},742:function(t,a,s){t.exports=s.p+"assets/img/h12.18b48020.png"},743:function(t,a,s){t.exports=s.p+"assets/img/hh.5f6dc071.png"},744:function(t,a,s){t.exports=s.p+"assets/img/hhh.beda8c1e.png"},961:function(t,a,s){"use strict";s.r(a);var _=s(36),v=Object(_.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"http缓存控制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http缓存控制"}},[t._v("#")]),t._v(" http缓存控制")]),t._v(" "),_("p",[t._v("Web 缓存大致可以分为：")]),t._v(" "),_("p",[t._v("数据库缓存")]),t._v(" "),_("p",[t._v("服务器端缓存（代理服务器缓存、CDN 缓存）")]),t._v(" "),_("p",[t._v("浏览器缓存。")]),t._v(" "),_("p",[t._v("浏览器缓存包含： HTTP 缓存、indexDB、cookie、localstorage 等等。")]),t._v(" "),_("p",[t._v("浏览器缓存主要是 HTTP 协议定义的缓存机制。")]),t._v(" "),_("p",[t._v("HTML meta 标签，例如")]),t._v(" "),_("div",{staticClass:"language-html line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-html"}},[_("code",[_("span",{pre:!0,attrs:{class:"token tag"}},[_("span",{pre:!0,attrs:{class:"token tag"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("META")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("HTTP-EQUIV")]),_("span",{pre:!0,attrs:{class:"token attr-value"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("Pragma"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),_("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("CONTENT")]),_("span",{pre:!0,attrs:{class:"token attr-value"}},[_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("no-store"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("含义是让浏览器不缓存当前页面。但是代理服务器不解析 HTML 内容，一般应用广泛的是用 HTTP 头信息控制缓存。")]),t._v(" "),_("h2",{attrs:{id:"_1-浏览器缓存分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器缓存分类"}},[t._v("#")]),t._v(" 1.浏览器缓存分类")]),t._v(" "),_("p",[t._v("浏览器缓存分为强缓存和协商缓存，浏览器加载一个页面的简单流程如下：")]),t._v(" "),_("ol",[_("li",[t._v("浏览器先根据这个资源的http头信息来判断是否命中强缓存。如果命中则直接加在缓存中的资源，并不会将请求发送到服务器。（强缓存）")]),t._v(" "),_("li",[t._v("如果未命中强缓存，则浏览器会将资源加载请求发送到服务器。服务器来判断浏览器本地缓存是否失效。若可以使用，则服务器并不会返回资源信息，浏览器继续从缓存加载资源。（协商缓存）")]),t._v(" "),_("li",[t._v("如果未命中协商缓存，则服务器会将完整的资源返回给浏览器，浏览器加载新资源，并更新缓存。（新的请求）")])]),t._v(" "),_("h2",{attrs:{id:"_2-强缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-强缓存"}},[t._v("#")]),t._v(" 2.强缓存")]),t._v(" "),_("p",[t._v("命中强缓存时，浏览器并"),_("strong",[t._v("不会将请求发送给服务器")]),t._v("。在Chrome的开发者工具中看到http的返回码是200，但是在Size列会显示为(from cache)。")]),t._v(" "),_("p",[_("img",{attrs:{src:s(737),alt:"h5"}})]),t._v(" "),_("p",[t._v("强缓存是利用http的返回头中的Expires或者Cache-Control两个字段来控制的，用来表示资源的缓存时间。")]),t._v(" "),_("h3",{attrs:{id:"expires"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[t._v("#")]),t._v(" Expires")]),t._v(" "),_("p",[t._v("缓存过期时间，用来指定"),_("strong",[t._v("资源到期的时间")]),t._v("，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和Last-modified结合使用。但在上面我们提到过，cache-control的优先级更高。 Expires是Web服务器响应消息头字段，在响应http请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。")]),t._v(" "),_("p",[_("img",{attrs:{src:s(738),alt:"h6"}})]),t._v(" "),_("p",[t._v("该字段会返回一个时间，比如Expires:Thu,31 Dec 2037 23:59:59 GMT。这个时间代表着这个"),_("u",[t._v("资源的失效时间")]),t._v("，也就是说在2037年12月31日23点59分59秒之前都是有效的，即命中缓存。这种方式有一个明显的缺点，由于失效时间是一个"),_("code",[t._v("绝对时间")]),t._v("，所以当客户端本地时间被修改以后，服务器与客户端时间偏差变大以后，就会导致缓存混乱。于是发展出了Cache-Control。")]),t._v(" "),_("h3",{attrs:{id:"cache-control"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[t._v("#")]),t._v(" Cache-Control")]),t._v(" "),_("p",[t._v("Cache-Control是一个"),_("code",[t._v("相对时间")]),t._v("，例如Cache-Control:3600，代表着资源的有效期是3600秒。由于是相对时间，并且都是与客户端时间比较，所以服务器与客户端时间偏差也不会导致问题。\nCache-Control与Expires可以在服务端配置同时启用或者启用任意一个，同时启用的时候"),_("strong",[t._v("Cache-Control优先级高")]),t._v("。")]),t._v(" "),_("p",[t._v("Cache-Control 可以由多个字段组合而成，主要有以下几个取值：")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("max-age")]),t._v(" 指定一个时间长度，在这个时间段内缓存是有效的，单位是s。例如设置 Cache-Control:max-age=31536000，也就是说缓存有效期为（31536000 / 24 / 60 * 60）天，第一次访问这个资源的时候，服务器端也返回了 Expires 字段，并且过期时间是一年后。")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(739),alt:"h7"}})]),t._v(" "),_("p",[t._v("在没有禁用缓存并且没有超过有效时间的情况下，再次访问这个资源就命中了缓存，不会向服务器请求资源而是直接从浏览器缓存中取。")]),t._v(" "),_("p",[t._v("在没有禁用缓存并且没有超过有效时间的情况下，再次访问这个资源就命中了缓存，不会向服务器请求资源而是直接从浏览器缓存中取。")]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[_("p",[_("strong",[t._v("s-maxage")]),t._v(" 同 max-age，覆盖 max-age、Expires，但仅适用于共享缓存，在私有缓存中被忽略。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("public")]),t._v(" 表明响应可以被任何对象（发送请求的客户端、代理服务器等等）缓存。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("private")]),t._v(" 表明响应只能被单个用户（可能是操作系统用户、浏览器用户）缓存，是非共享的，不能被代理服务器缓存。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("no-cache")]),t._v(" 强制所有缓存了该响应的用户，在使用已缓存的数据前，发送带验证器的请求到服务器。不是字面意思上的不缓存。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("no-store")]),t._v(" 禁止缓存，每次请求都要向服务器重新获取数据。")])])]),t._v(" "),_("p",[t._v("7."),_("strong",[t._v("must-revalidate")]),t._v("指定如果页面是过期的，则去服务器进行获取。这个指令并不常用，就不做过多的讨论了。")]),t._v(" "),_("h2",{attrs:{id:"_3-协商缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-协商缓存"}},[t._v("#")]),t._v(" 3.协商缓存")]),t._v(" "),_("p",[t._v("若未命中强缓存，则浏览器会将请求发送至服务器。服务器根据http头信息中的Last-Modify/If-Modify-Since或Etag/If-None-Match来判断是否命中协商缓存。如果命中，则http返回码为304，浏览器从缓存中加载资源。")]),t._v(" "),_("h3",{attrs:{id:"last-modify-if-modify-since"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#last-modify-if-modify-since"}},[t._v("#")]),t._v(" Last-Modify/If-Modify-Since")]),t._v(" "),_("p",[t._v("浏览器第一次请求一个资源的时候，服务器返回的header中会加上Last-Modify，Last-modify是一个时间标识该资源的最后修改时间，例如"),_("code",[t._v("Last-Modify: Thu,31 Dec 2037 23:59:59 GMT")]),t._v("。")]),t._v(" "),_("p",[_("img",{attrs:{src:s(740),alt:"h9"}})]),t._v(" "),_("p",[t._v("当浏览器再次请求该资源时，发送的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到If-Modify-Since后，根据资源的最后修改时间判断是否命中缓存。")]),t._v(" "),_("p",[_("img",{attrs:{src:s(741),alt:"h10"}})]),t._v(" "),_("p",[t._v("如果命中缓存，则返回http304，并且不会返回资源内容，并且不会返回Last-Modify。由于对比的服务端时间，所以客户端与服务端时间差距不会导致问题。但是有时候通过最后修改时间来判断资源是否修改还是不太准确（资源变化了最后修改时间也可以一致）。于是出现了ETag/If-None-Match。")]),t._v(" "),_("h3",{attrs:{id:"etag-if-none-match"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#etag-if-none-match"}},[t._v("#")]),t._v(" ETag/If-None-Match")]),t._v(" "),_("p",[t._v("与Last-Modify/If-Modify-Since不同的是，Etag/If-None-Match返回的是一个校验码（ETag: entity tag）。ETag可以保证每一个资源是唯一的，资源变化都会导致ETag变化*。ETag值的变更则说明资源状态已经被修改。服务器根据浏览器上发送的If-None-Match值来判断是否命中缓存。")]),t._v(" "),_("p",[_("img",{attrs:{src:s(742),alt:"h12"}})]),t._v(" "),_("p",[_("strong",[t._v("ETag")]),t._v("扩展说明")]),t._v(" "),_("p",[t._v("我们对ETag寄予厚望，希望它对于每一个url生成唯一的值，资源变化时ETag也发生变化。神秘的Etag是如何生成的呢？以Apache为例，ETag生成靠以下几种因子")]),t._v(" "),_("ol",[_("li",[t._v("文件的i-node编号，此i-node非彼iNode。是Linux/Unix用来识别文件的编号。是的，识别文件用的不是文件名。使用命令’ls –I’可以看到。")]),t._v(" "),_("li",[t._v("文件最后修改时间")]),t._v(" "),_("li",[t._v("文件大小\n生成Etag的时候，可以使用其中一种或几种因子，使用抗碰撞散列函数来生成。所以，理论上ETag也是会重复的，只是概率小到可以忽略。")])]),t._v(" "),_("p",[_("strong",[t._v("既生Last-Modified何生Etag？")])]),t._v(" "),_("p",[t._v("你可能会觉得使用Last-Modified已经足以让浏览器知道本地的缓存副本是否足够新，为什么还需要Etag（实体标识）呢？HTTP1.1中Etag的出现主要是为了解决几个Last-Modified比较难解决的问题：")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("Last-Modified标注的最后修改只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，它将不能准确标注文件的修改时间")])]),t._v(" "),_("li",[_("p",[t._v("如果某些文件会被定期生成，当有时内容并没有任何变化，但Last-Modified却改变了，导致文件没法使用缓存")])])]),t._v(" "),_("p",[t._v("3.有可能存在服务器没有准确获取文件修改时间，或者与代理服务器时间不一致等情形")]),t._v(" "),_("p",[t._v("Etag是服务器自动生成或者由开发者生成的对应资源在服务器端的唯一标识符，能够更加准确的控制缓存。Last-Modified与ETag是可以一起使用的，服务器会优先验证ETag，一致的情况下，才会继续比对Last-Modified，最后才决定是否返回304。")]),t._v(" "),_("h2",{attrs:{id:"_4浏览器请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4浏览器请求"}},[t._v("#")]),t._v(" 4浏览器请求")]),t._v(" "),_("h3",{attrs:{id:"浏览器第一次请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器第一次请求"}},[t._v("#")]),t._v(" 浏览器第一次请求")]),t._v(" "),_("p",[_("img",{attrs:{src:s(743),alt:"hh"}})]),t._v(" "),_("h3",{attrs:{id:"浏览器第二次请求"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器第二次请求"}},[t._v("#")]),t._v(" 浏览器第二次请求")]),t._v(" "),_("p",[_("img",{attrs:{src:s(744),alt:"hhh"}})]),t._v(" "),_("h3",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),_("p",[t._v("http 缓存控制")]),t._v(" "),_("ol",[_("li",[t._v("http缓存能够帮助服务器提高并发性能，很多资源不需要重复请求直接从浏览器中拿缓存")]),t._v(" "),_("li",[t._v("http 缓存分类 ：强缓存 协商缓存")]),t._v(" "),_("li",[t._v("强缓存通过  expires 和 cache-control控制  协商缓存  通过  last-Modify  和E-tag控制")]),t._v(" "),_("li",[t._v("补充：\n1. 为什么有expires 有需要cache-control\n因为expires 有个服务器和浏览器时间不同步的问题\nexpires是绝对事件   cache-control是相对时间\n2. last-modify和Etag\nlast-modify 它是有个精度问题  到秒\ne-tag 没有精度问题  只要文件改变  e-tag值就改变")])]),t._v(" "),_("h2",{attrs:{id:"_5相关扩展"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5相关扩展"}},[t._v("#")]),t._v(" 5相关扩展")]),t._v(" "),_("ol",[_("li",[t._v("用户行为与缓存 浏览器缓存行为还有用户的行为有关！！！")])]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[_("strong",[t._v("新开窗口")])]),t._v(" "),_("th",[t._v("有效")]),t._v(" "),_("th",[t._v("有效")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[_("strong",[t._v("用户操作")])]),t._v(" "),_("td",[_("strong",[t._v("Expires/Cache-Control")])]),t._v(" "),_("td",[_("strong",[t._v("Last-Modified/Etag")])])]),t._v(" "),_("tr",[_("td",[_("strong",[t._v("地址栏回车")])]),t._v(" "),_("td",[t._v("有效")]),t._v(" "),_("td",[t._v("有效")])]),t._v(" "),_("tr",[_("td",[_("strong",[t._v("页面链接跳转")])]),t._v(" "),_("td",[t._v("有效")]),t._v(" "),_("td",[t._v("有效")])]),t._v(" "),_("tr",[_("td",[_("strong",[t._v("前进、后退")])]),t._v(" "),_("td",[t._v("有效")]),t._v(" "),_("td",[t._v("有效")])]),t._v(" "),_("tr",[_("td",[_("strong",[t._v("F5")]),t._v(" 刷新")]),t._v(" "),_("td",[t._v("无效")]),t._v(" "),_("td",[t._v("有效")])]),t._v(" "),_("tr",[_("td",[t._v("**Ctrl+F5 **刷新")]),t._v(" "),_("td",[t._v("无效")]),t._v(" "),_("td",[t._v("无效")])])])]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[_("a",{attrs:{href:"https://www.cnblogs.com/straybirds/p/9413937.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("服务器端的缓存   CDN  、redis、数据库缓存等"),_("OutboundLink")],1)]),t._v(" "),_("li",[t._v("[Nginx下关于缓存控制字段cache-control的配置说明](")])])])}),[],!1,null,null,null);a.default=v.exports}}]);