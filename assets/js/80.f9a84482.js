(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{730:function(t,s,n){t.exports=n.p+"assets/img/addRouters.fcebc00c.png"},950:function(t,s,n){"use strict";n.r(s);var a=n(36),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前端鉴权一般思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端鉴权一般思路"}},[t._v("#")]),t._v(" 前端鉴权一般思路")]),t._v(" "),a("p",[t._v("我们可以 在axios的  请求拦截器 里面 配置 token")]),t._v(" "),a("p",[a("strong",[t._v("1 有些axios请求 需要token  我们 是可以 配置请求拦截器")])]),t._v(" "),a("p",[a("strong",[t._v("2 有些页面 需要登录才能看  我们也可以用路由导航守卫 router.beforeEach  判断 token")])]),t._v(" "),a("p",[t._v("3 新情况？侧边栏 有很多 那么 后台侧边栏 有不同的人登录 难道我们要 每个人都可以看全部侧边栏吗？")]),t._v(" "),a("p",[t._v("​    比如 总经理 看的侧边栏很多 权限大 能操作很多页面")]),t._v(" "),a("p",[t._v("​             普通员工  就只能看两个侧边栏 因为他的权限低")]),t._v(" "),a("p",[a("strong",[t._v("这个时候就涉及到  如果不同的人登录 权限职位不一样  应该给他展示 不同的侧边栏")])]),t._v(" "),a("p",[t._v("这个时候 侧边栏 一般是路由相关的页面  是需要循环生成的")]),t._v(" "),a("p",[t._v("不同的人 路由数组不一样  那么 循环生成的侧边栏 就不一样了")]),t._v(" "),a("p",[t._v("这样就可以控制侧边栏 显示")]),t._v(" "),a("p",[t._v("为什么要在前端鉴权?")]),t._v(" "),a("p",[t._v("因为传统项目都是在后端鉴权, 然后通过进行拦截 跳转 对应操作")]),t._v(" "),a("p",[t._v("因为 我们做的并不是传统的项目,而是前后分离项目,也就是前端项目和后端服务进行了**"),a("code",[t._v("剥离")]),t._v("**, 后端没有办法用session来存储你任意一个前端项目域名下的身份信息, 所以jwt 鉴权模式应运而生.")]),t._v(" "),a("p",[t._v("​    也就是后端不再提供会话的身份存储,而是通过一个鉴权接口将用户的身份,登录时间,请求端口,协议头..等等信息 组装成一个加密的串 返给前端请求,  前端拿到了这个串,就可以认为自己登录成功")]),t._v(" "),a("p",[t._v("那么这个**"),a("code",[t._v("加密串")]),a("strong",[t._v("就成了 前端用户是否登录的成功标志, 这就是我们的token , 那么在接下来的接口请求中,我们几乎都要携带这个加密串,因为它是")]),a("code",[t._v("唯一")]),a("strong",[t._v("能")]),a("code",[t._v("证明我们身份")]),t._v("**的信息.")]),t._v(" "),a("p",[t._v("为了方便,我们会一般在请求工具 axios(举例)的拦截器中**"),a("code",[t._v("统一注入token")]),t._v("**, 减少代码的重复")]),t._v(" "),a("p",[t._v("token 同时具有时效性,我们也需要在此时对token过期进行处理,一旦出现过期的请求码, 就需要进行 换取新token 或者重新登录的解决方案")]),t._v(" "),a("p",[t._v("除此之外,我们还需要依据**"),a("code",[t._v("有无加密串")]),t._v("** 在前端对于某些页面的访问进行限制, 这个会用到我们的Vue-Router中的导航守卫.")]),t._v(" "),a("p",[a("strong",[t._v("vue 单页项目涉及到多角色用户权限问题，不同的角色用户拥有不同的功能权限， 不同的功能权限对应的不同的页面")])]),t._v(" "),a("p",[t._v("一开始 有一些 默认的路由")]),t._v(" "),a("p",[t._v("登录后 比如你是总经理  后台会返回给前端 总经理能看见的 路由页面地址 数组")]),t._v(" "),a("p",[t._v("前端在router.beforeEach 路由导航守卫里面 拿到返回的地址  使用 "),a("strong",[t._v("router.addRouter")]),t._v(" 动态加上 这个项目路由就好了")]),t._v(" "),a("p",[t._v("routes= 后台返回的 符合条件的 路由数据 类似我们自己写的那个path 等等\nthis.$router.addRoutes(routes)")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 路由导航守卫")]),t._v("\nrouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("beforeEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("to"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  　　　　"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//判断user信息是否已经获取 我已经登录了")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 登录后就 把 后台给我的路由数组 addRouter就行")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("token"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  　　　　　　　　"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//根据用户的角色类型来生成对应的新路由")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  在这里要用 登录时候后台返回的 路由数组")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 建议大家 把那个数组 写在 vuex里面")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从vuex 拿出 登录时候存的 newRouter")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 你提前写好 会有所有人能看的 一些 默认的路由")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2 不同的 登录后  对应的路由 再追加")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// this.$store.state.newRouter")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newRouter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/xxx"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将新路由添加到路由中")]),t._v("\n              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// router.addRoutes vue带的专门用来追加路由的")]),t._v("\n              　router"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addRoutes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newRouter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  　　　　　　　"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//为了正确渲染导航,将对应的新的路由添加到vuex中")]),t._v("\n               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 渲染对应的侧边栏")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[a("img",{attrs:{src:n(730),alt:"addRouters"}})]),t._v(" "),a("p",[t._v("如果是"),a("strong",[t._v("前端 就 先写一个  全的  所有的  路由数组")])]),t._v(" "),a("p",[t._v("登录之后 后台 返回  当前的登录人的 数据 比如 路由列表或者这个人的权限")]),t._v(" "),a("p",[t._v("前端 拿到路由列表 去循环 和你那个全的 路由 对比  拿到相关的  在addRouter添加 就行")])])}),[],!1,null,null,null);s.default=e.exports}}]);